<component name="InspectionProjectProfileManager">
  <profile version="1.0">
    <option name="myName" value="Project Default" />
    <inspection_tool class="6a21fbe6-46ac-3081-9a71-198c4c6c6624" enabled="true" level="INFORMATION" enabled_by_default="true" />
    <inspection_tool class="SSBasedInspection" enabled="true" level="WARNING" enabled_by_default="true">
      <replaceConfiguration name="Create template for controller unit test" description="Create method template for controller unit test" problemDescriptor="Create template for controller unit test" text="@$Annotation$&#10;$MethodType$ $Method$($ParameterType$ $Parameter$) throws $Exception$ {&#10;  $Statement$;&#10;}" recursive="false" caseInsensitive="true" type="JAVA" pattern_context="member" reformatAccordingToStyle="true" shortenFQN="true" replacement="@$Annotation$&#10;$MethodType$ $Method$($ParameterType$ $Parameter$) throws $Exception$ {&#10;  $Statement$;&#10;}&#10;&#10;/*TODO: This is autogenerated template - check it before using*/&#10;@Test&#10;@SneakyThrows&#10;public void $MethodTest$ (){&#10;  $body$&#10;      .andExpect(status().isOk());&#10;}">
        <constraint name="__context__" within="" contains="" />
        <constraint name="Annotation" regexp="(PostMapping|GetMapping|PutMapping)" maxCount="2147483647" within="" contains="" />
        <constraint name="MethodType" within="" contains="" />
        <constraint name="ParameterType" within="" contains="" />
        <constraint name="Parameter" minCount="0" maxCount="2147483647" within="" contains="" />
        <constraint name="Exception" minCount="0" maxCount="2147483647" within="" contains="" />
        <constraint name="Statement" minCount="0" maxCount="2147483647" within="" contains="" />
        <constraint name="Method" within="" contains="" />
        <variableDefinition name="MethodTest" script="&quot;Method.getName() + &quot;Test&quot;&quot;" />
        <variableDefinition name="body" script="&quot;mocks=&quot;&quot; // mocked method templates&#10;prefix = &quot;&quot; // url prefix from class annotation&#10;method=&quot;&quot;&#10;pathParams = &quot;&quot;// method path substitution parameters&#10;queryProps=&quot;&quot;&#10;expects=&quot;&quot;&#10;&#10;clazz=Method.getContainingClass();&#10;if (clazz==null) return &quot;&quot;;&#10;&#10;def closure // it will be a recursive function&#10;closure = {&#10;    for (com.intellij.psi.PsiStatement st in it.getStatements()) {&#10;        if (st instanceof com.intellij.psi.PsiDeclarationStatement)&#10;            for (com.intellij.psi.PsiElement elem in st.getDeclaredElements() )&#10;                if (elem instanceof com.intellij.psi.PsiLocalVariable)&#10;                    mocks += &quot;given(&quot; + elem.getInitializer().getText() + &quot;)\n\t\t.willReturn(new &quot; +  elem.getTypeElement().getText() + &quot;());\n\t\t&quot;&#10;        if (st instanceof com.intellij.psi.PsiReturnStatement)&#10;            if (!st.getReturnValue().textMatches(&quot;ResponseEntity.ok().build()&quot;))&#10;                expects=&quot;\n\t\t.andExpect(content().contentType(MediaType.APPLICATION_JSON))&quot;&#10;        if (st instanceof com.intellij.psi.PsiTryStatement)&#10;            closure(st.getTryBlock())&#10;    }}&#10;closure(Method.getBody())&#10;&#10;for (com.intellij.psi.PsiAnnotation psa in Method.getContainingClass().getModifierList().getAnnotations())&#10;    if (psa.getNameReferenceElement().getReferenceNameElement().getText().equals(&quot;RequestMapping&quot;))&#10;        if (psa.getParameterList().getAttributes().size()&gt;0)&#10;            prefix=psa.getParameterList().getAttributes()[0].getValue().getText() + &quot; + &quot;&#10;annotationName = Annotation.getNameReferenceElement().getReferenceNameElement().getText()&#10;&#10;if (annotationName.equals(&quot;GetMapping&quot;)) method+=&quot;get&quot;&#10;if (annotationName.equals(&quot;PutMapping&quot;)) method+=&quot;put&quot;&#10;if (annotationName.equals(&quot;PostMapping&quot;)) method+=&quot;post&quot;&#10;&#10;for (com.intellij.psi.PsiParameter p in Method.getParameterList().getParameters()) {&#10;    if (p.getModifierList().hasAnnotation(&quot;org.springframework.web.bind.annotation.PathVariable&quot;))&#10;    {&#10;        pathParams += &quot;,&quot; + p.getName()&#10;    }&#10;    if (p.getModifierList().hasAnnotation(&quot;org.springframework.web.bind.annotation.RequestBody&quot;))&#10;    {&#10;        queryProps+=&quot;\n\t\t.contentType(MediaType.APPLICATION_JSON)&quot;&#10;        queryProps+=&quot;\n\t\t.content(objectMapper.writeValueAsString(new &quot; + p.getType().getName() +&quot;()))&quot;&#10;    }&#10;}&#10;&#10;url=Annotation.findAttributeValue().getText()&#10;return &quot;$mocks\n\tmockMvc.perform(${method}(${prefix}${url}${pathParams})${queryProps})${expects}&quot;&quot;" />
      </replaceConfiguration>
    </inspection_tool>
  </profile>
</component>